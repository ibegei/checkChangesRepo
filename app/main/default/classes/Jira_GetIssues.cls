//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class Jira_GetIssues {

	public class Status {
		public String self {get;set;} 
		public String description {get;set;} 
		public String iconUrl {get;set;} 
		public String name {get;set;} 
		public String id {get;set;} 
		public StatusCategory statusCategory {get;set;} 

		public Status(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'self') {
							self = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'iconUrl') {
							iconUrl = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'statusCategory') {
							statusCategory = new StatusCategory(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Status consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String expand {get;set;} 
	public Integer startAt {get;set;} 
	public Integer maxResults {get;set;} 
	public Integer total {get;set;} 
	public List<Issues> issues {get;set;} 

	public Jira_GetIssues(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'expand') {
						expand = parser.getText();
					} else if (text == 'startAt') {
						startAt = parser.getIntegerValue();
					} else if (text == 'maxResults') {
						maxResults = parser.getIntegerValue();
					} else if (text == 'total') {
						total = parser.getIntegerValue();
					} else if (text == 'issues') {
						issues = arrayOfIssues(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'Jira_GetIssues consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Comment {
		public List<Comments> comments {get;set;} 
		public Integer maxResults {get;set;} 
		public Integer total {get;set;} 
		public Integer startAt {get;set;} 

		public Comment(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'comments') {
							comments = arrayOfComments(parser);
						} else if (text == 'maxResults') {
							maxResults = parser.getIntegerValue();
						} else if (text == 'total') {
							total = parser.getIntegerValue();
						} else if (text == 'startAt') {
							startAt = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Comment consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Assignee {
		public String self {get;set;} 
		public String name {get;set;} 
		public String key {get;set;} 
		public String accountId {get;set;} 
		public String emailAddress {get;set;} 
		public AvatarUrls avatarUrls {get;set;} 
		public String displayName {get;set;} 
		public Boolean active {get;set;} 
		public String timeZone {get;set;} 

		public Assignee(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'self') {
							self = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'key') {
							key = parser.getText();
						} else if (text == 'accountId') {
							accountId = parser.getText();
						} else if (text == 'emailAddress') {
							emailAddress = parser.getText();
						} else if (text == 'avatarUrls') {
							avatarUrls = new AvatarUrls(parser);
						} else if (text == 'displayName') {
							displayName = parser.getText();
						} else if (text == 'active') {
							active = parser.getBooleanValue();
						} else if (text == 'timeZone') {
							timeZone = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Assignee consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Comments {

		public Comments(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Comments consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Priority {
		public String self {get;set;} 
		public String iconUrl {get;set;} 
		public String name {get;set;} 
		public String id {get;set;} 

		public Priority(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'self') {
							self = parser.getText();
						} else if (text == 'iconUrl') {
							iconUrl = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Priority consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Issues {
		public String expand {get;set;} 
		public String id {get;set;} 
		public String self {get;set;} 
		public String key {get;set;} 
		public Fields fields {get;set;} 

		public Issues(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'expand') {
							expand = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'self') {
							self = parser.getText();
						} else if (text == 'key') {
							key = parser.getText();
						} else if (text == 'fields') {
							fields = new Fields(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Issues consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Fields_Z {
		public String summary {get;set;} 
		public Issuetype issuetype {get;set;} 
		public String description {get;set;} 
		public Project project {get;set;} 
		public Comment comment {get;set;} 
		public Assignee assignee {get;set;} 
		public Priority priority {get;set;} 
		public Status status {get;set;} 

		public Fields_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = parser.getText();
						} else if (text == 'issuetype') {
							issuetype = new Issuetype(parser);
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'project') {
							project = new Project(parser);
						} else if (text == 'comment') {
							comment = new Comment(parser);
						} else if (text == 'assignee') {
							assignee = new Assignee(parser);
						} else if (text == 'priority') {
							priority = new Priority(parser);
						} else if (text == 'status') {
							status = new Status(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Fields_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Project {
		public String self {get;set;} 
		public String id {get;set;} 
		public String key {get;set;} 
		public String name {get;set;} 
		public String projectTypeKey {get;set;} 
		public AvatarUrls avatarUrls {get;set;} 

		public Project(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'self') {
							self = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'key') {
							key = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'projectTypeKey') {
							projectTypeKey = parser.getText();
						} else if (text == 'avatarUrls') {
							avatarUrls = new AvatarUrls(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Project consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class StatusCategory {
		public String self {get;set;} 
		public Integer id {get;set;} 
		public String key {get;set;} 
		public String colorName {get;set;} 
		public String name {get;set;} 

		public StatusCategory(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'self') {
							self = parser.getText();
						} else if (text == 'id') {
							id = parser.getIntegerValue();
						} else if (text == 'key') {
							key = parser.getText();
						} else if (text == 'colorName') {
							colorName = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'StatusCategory consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Fields {
		public String summary {get;set;} 
		public Issuetype issuetype {get;set;} 
		public Project project {get;set;} 
		public String description {get;set;} 
		public Comment comment {get;set;} 
		public Assignee assignee {get;set;} 
		public Priority priority {get;set;} 
		public Status status {get;set;} 

		public Fields(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'summary') {
							summary = parser.getText();
						} else if (text == 'issuetype') {
							issuetype = new Issuetype(parser);
						} else if (text == 'project') {
							project = new Project(parser);
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'comment') {
							comment = new Comment(parser);
						} else if (text == 'assignee') {
							assignee = new Assignee(parser);
						} else if (text == 'priority') {
							priority = new Priority(parser);
						} else if (text == 'status') {
							status = new Status(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Fields consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Issuetype {
		public String self {get;set;} 
		public String id {get;set;} 
		public String description {get;set;} 
		public String iconUrl {get;set;} 
		public String name {get;set;} 
		public Boolean subtask {get;set;} 
		public Integer avatarId {get;set;} 

		public Issuetype(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'self') {
							self = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'iconUrl') {
							iconUrl = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'subtask') {
							subtask = parser.getBooleanValue();
						} else if (text == 'avatarId') {
							avatarId = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Issuetype consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AvatarUrls {
		public String x48x48 {get;set;} 
		public String x24x24 {get;set;} 
		public String x16x16 {get;set;} 
		public String x32x32 {get;set;} 

		public AvatarUrls(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == '48x48') {
							x48x48 = parser.getText();
						} else if (text == '24x24') {
							x24x24 = parser.getText();
						} else if (text == '16x16') {
							x16x16 = parser.getText();
						} else if (text == '32x32') {
							x32x32 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'AvatarUrls consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static Jira_GetIssues parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new Jira_GetIssues(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	














    private static List<Comments> arrayOfComments(System.JSONParser p) {
        List<Comments> res = new List<Comments>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Comments(p));
        }
        return res;
    }


    private static List<Issues> arrayOfIssues(System.JSONParser p) {
        List<Issues> res = new List<Issues>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Issues(p));
        }
        return res;
    }






}