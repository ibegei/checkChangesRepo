//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class WorkItemSearchResults {

	public class Project {
		public String name {get;set;} 
		public String id {get;set;} 

		public Project(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Project consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Integer count {get;set;} 
	public List<Results> results {get;set;} 
	public Integer infoCode {get;set;} 
	public Facets facets {get;set;} 

	public WorkItemSearchResults(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'count') {
						count = parser.getIntegerValue();
					} else if (text == 'results') {
						results = arrayOfResults(parser);
					} else if (text == 'infoCode') {
						infoCode = parser.getIntegerValue();
					} else if (text == 'facets') {
						facets = new Facets(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'WorkItemSearchResults consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Hits {
		public String fieldReferenceName {get;set;} 
		public List<String> highlights {get;set;} 

		public Hits(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'fieldReferenceName') {
							fieldReferenceName = parser.getText();
						} else if (text == 'highlights') {
							highlights = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Hits consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Fields {
		public String system_id {get;set;} // in json: system.id
		public String system_workitemtype {get;set;} // in json: system.workitemtype
		public String system_title {get;set;} // in json: system.title
		public String system_assignedto {get;set;} // in json: system.assignedto
		public String system_state {get;set;} // in json: system.state
		public String system_tags {get;set;} // in json: system.tags
		public String system_rev {get;set;} // in json: system.rev
		public String system_createddate {get;set;} // in json: system.createddate
		public String system_changeddate {get;set;} // in json: system.changeddate

		public Fields(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'system.id') {
							system_id = parser.getText();
						} else if (text == 'system.workitemtype') {
							system_workitemtype = parser.getText();
						} else if (text == 'system.title') {
							system_title = parser.getText();
						} else if (text == 'system.assignedto') {
							system_assignedto = parser.getText();
						} else if (text == 'system.state') {
							system_state = parser.getText();
						} else if (text == 'system.tags') {
							system_tags = parser.getText();
						} else if (text == 'system.rev') {
							system_rev = parser.getText();
						} else if (text == 'system.createddate') {
							system_createddate = parser.getText();
						} else if (text == 'system.changeddate') {
							system_changeddate = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Fields consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Facets {
		public List<System_TeamProject> System_TeamProject {get;set;} // in json: System.TeamProject
		public List<System_TeamProject> System_WorkItemType {get;set;} // in json: System.WorkItemType
		public List<System_TeamProject> System_State {get;set;} // in json: System.State
		public List<System_TeamProject> System_AssignedTo {get;set;} // in json: System.AssignedTo

		public Facets(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'System.TeamProject') {
							System_TeamProject = arrayOfSystem_TeamProject(parser);
						} else if (text == 'System.WorkItemType') {
							System_WorkItemType = arrayOfSystem_TeamProject(parser);
						} else if (text == 'System.State') {
							System_State = arrayOfSystem_TeamProject(parser);
						} else if (text == 'System.AssignedTo') {
							System_AssignedTo = arrayOfSystem_TeamProject(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Facets consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Results {
		public Project project {get;set;} 
		public Fields fields {get;set;} 
		public List<Hits> hits {get;set;} 
		public String url {get;set;} 

		public Results(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'project') {
							project = new Project(parser);
						} else if (text == 'fields') {
							fields = new Fields(parser);
						} else if (text == 'hits') {
							hits = arrayOfHits(parser);
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Results consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class System_TeamProject {
		public String name {get;set;} 
		public String id {get;set;} 
		public Integer resultCount {get;set;} 

		public System_TeamProject(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'resultCount') {
							resultCount = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'System_TeamProject consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static WorkItemSearchResults parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new WorkItemSearchResults(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<Hits> arrayOfHits(System.JSONParser p) {
        List<Hits> res = new List<Hits>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Hits(p));
        }
        return res;
    }


    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }




    private static List<System_TeamProject> arrayOfSystem_TeamProject(System.JSONParser p) {
        List<System_TeamProject> res = new List<System_TeamProject>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new System_TeamProject(p));
        }
        return res;
    }




    private static List<Results> arrayOfResults(System.JSONParser p) {
        List<Results> res = new List<Results>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Results(p));
        }
        return res;
    }




}