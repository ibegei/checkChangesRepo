//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class WorkItemCreateResp {

    public class Links_Z {
        public Avatar self {get;set;} 
        public Avatar workItemUpdates {get;set;} 
        public Avatar workItemRevisions {get;set;} 
        public Avatar workItemComments {get;set;} 
        public Avatar html {get;set;} 
        public Avatar workItemType {get;set;} 
        public Avatar fields {get;set;} 

        public Links_Z(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'self') {
                            self = new Avatar(parser);
                        } else if (text == 'workItemUpdates') {
                            workItemUpdates = new Avatar(parser);
                        } else if (text == 'workItemRevisions') {
                            workItemRevisions = new Avatar(parser);
                        } else if (text == 'workItemComments') {
                            workItemComments = new Avatar(parser);
                        } else if (text == 'html') {
                            html = new Avatar(parser);
                        } else if (text == 'workItemType') {
                            workItemType = new Avatar(parser);
                        } else if (text == 'fields') {
                            fields = new Avatar(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Links_Z consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Fields {
        public String System_AreaPath {get;set;} // in json: System.AreaPath
        public String System_TeamProject {get;set;} // in json: System.TeamProject
        public String System_IterationPath {get;set;} // in json: System.IterationPath
        public String System_WorkItemType {get;set;} // in json: System.WorkItemType
        public String System_State {get;set;} // in json: System.State
        public String System_Reason {get;set;} // in json: System.Reason
        public System_AssignedTo System_AssignedTo {get;set;} // in json: System.AssignedTo
        public String System_CreatedDate {get;set;} // in json: System.CreatedDate
        public System_AssignedTo System_CreatedBy {get;set;} // in json: System.CreatedBy
        public String System_ChangedDate {get;set;} // in json: System.ChangedDate
        public System_AssignedTo System_ChangedBy {get;set;} // in json: System.ChangedBy
        public Integer System_CommentCount {get;set;} // in json: System.CommentCount
        public String System_Title {get;set;} // in json: System.Title
        public String Microsoft_VSTS_Common_StateChangeDate {get;set;} // in json: Microsoft.VSTS.Common.StateChangeDate
        public String Microsoft_VSTS_Common_ActivatedDate {get;set;} // in json: Microsoft.VSTS.Common.ActivatedDate
        public System_AssignedTo Microsoft_VSTS_Common_ActivatedBy {get;set;} // in json: Microsoft.VSTS.Common.ActivatedBy
        public Integer Microsoft_VSTS_Common_Priority {get;set;} // in json: Microsoft.VSTS.Common.Priority
        public String System_Description {get;set;} // in json: System.Description

        public Fields(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'System.AreaPath') {
                            System_AreaPath = parser.getText();
                        } else if (text == 'System.TeamProject') {
                            System_TeamProject = parser.getText();
                        } else if (text == 'System.IterationPath') {
                            System_IterationPath = parser.getText();
                        } else if (text == 'System.WorkItemType') {
                            System_WorkItemType = parser.getText();
                        } else if (text == 'System.State') {
                            System_State = parser.getText();
                        } else if (text == 'System.Reason') {
                            System_Reason = parser.getText();
                        } else if (text == 'System.AssignedTo') {
                            System_AssignedTo = new System_AssignedTo(parser);
                        } else if (text == 'System.CreatedDate') {
                            System_CreatedDate = parser.getText();
                        } else if (text == 'System.CreatedBy') {
                            System_CreatedBy = new System_AssignedTo(parser);
                        } else if (text == 'System.ChangedDate') {
                            System_ChangedDate = parser.getText();
                        } else if (text == 'System.ChangedBy') {
                            System_ChangedBy = new System_AssignedTo(parser);
                        } else if (text == 'System.CommentCount') {
                            System_CommentCount = parser.getIntegerValue();
                        } else if (text == 'System.Title') {
                            System_Title = parser.getText();
                        } else if (text == 'Microsoft.VSTS.Common.StateChangeDate') {
                            Microsoft_VSTS_Common_StateChangeDate = parser.getText();
                        } else if (text == 'Microsoft.VSTS.Common.ActivatedDate') {
                            Microsoft_VSTS_Common_ActivatedDate = parser.getText();
                        } else if (text == 'Microsoft.VSTS.Common.ActivatedBy') {
                            Microsoft_VSTS_Common_ActivatedBy = new System_AssignedTo(parser);
                        } else if (text == 'Microsoft.VSTS.Common.Priority') {
                            Microsoft_VSTS_Common_Priority = parser.getIntegerValue();
                        } else if (text == 'System.Description') {
                            System_Description = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Fields consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public Integer id {get;set;} 
    public Integer rev {get;set;} 
    public Fields fields {get;set;} 
    public Links_Z x_links {get;set;} // in json: _links
    public String url {get;set;} 

    public WorkItemCreateResp(JSONParser parser) {
        while (parser.nextToken() != System.JSONToken.END_OBJECT) {
            if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                String text = parser.getText();
                if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                    if (text == 'id') {
                        id = parser.getIntegerValue();
                    } else if (text == 'rev') {
                        rev = parser.getIntegerValue();
                    } else if (text == 'fields') {
                        fields = new Fields(parser);
                    } else if (text == '_links') {
                        x_links = new Links_Z(parser);
                    } else if (text == 'url') {
                        url = parser.getText();
                    } else {
                        System.debug(LoggingLevel.WARN, 'WorkItemCreateResp consuming unrecognized property: '+text);
                        consumeObject(parser);
                    }
                }
            }
        }
    }
    
    public class System_AssignedTo {
        public String displayName {get;set;} 
        public String url {get;set;} 
        public Links x_links {get;set;} // in json: _links
        public String id {get;set;} 
        public String uniqueName {get;set;} 
        public String imageUrl {get;set;} 
        public String descriptor {get;set;} 

        public System_AssignedTo(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'displayName') {
                            displayName = parser.getText();
                        } else if (text == 'url') {
                            url = parser.getText();
                        } else if (text == '_links') {
                            x_links = new Links(parser);
                        } else if (text == 'id') {
                            id = parser.getText();
                        } else if (text == 'uniqueName') {
                            uniqueName = parser.getText();
                        } else if (text == 'imageUrl') {
                            imageUrl = parser.getText();
                        } else if (text == 'descriptor') {
                            descriptor = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'System_AssignedTo consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Links {
        public Avatar avatar {get;set;} 

        public Links(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'avatar') {
                            avatar = new Avatar(parser);
                        } else {
                            System.debug(LoggingLevel.WARN, 'Links consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    public class Avatar {
        public String href {get;set;} 

        public Avatar(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'href') {
                            href = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Avatar consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
    
    public static WorkItemCreateResp parse(String json) {
        System.JSONParser parser = System.JSON.createParser(json);
        return new WorkItemCreateResp(parser);
    }
    
    public static void consumeObject(System.JSONParser parser) {
        Integer depth = 0;
        do {
            System.JSONToken curr = parser.getCurrentToken();
            if (curr == System.JSONToken.START_OBJECT || 
                curr == System.JSONToken.START_ARRAY) {
                depth++;
            } else if (curr == System.JSONToken.END_OBJECT ||
                curr == System.JSONToken.END_ARRAY) {
                depth--;
            }
        } while (depth > 0 && parser.nextToken() != null);
            System.debug('');
    
    System.debug('');
    System.debug('');
    System.debug('');
    System.debug('');
    }
    
}